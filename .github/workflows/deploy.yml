name: Deploy Spring Boot App

on:
  push:
    branches:
      - master

jobs:
  publish-shared:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Verify Maven Wrapper
        run: |
          if [ ! -f mvnw ]; then
            echo "Maven Wrapper (mvnw) not found in the root of the repository."
            exit 1
          fi
          chmod +x ./mvnw

      - name: Publish fitnesspro-shared-communication
        run: |
          mkdir -p ~/.m2
          echo "
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.PACKAGES_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          " > ~/.m2/settings.xml
          ./mvnw clean deploy -DskipTests -pl fitnesspro-shared-communication -am
        env:
          PACKAGES_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
  build:
    runs-on: ubuntu-latest
    needs: publish-shared

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'adopt'

      - name: Grant execute permission for mvnw
        run: chmod +x ./mvnw

      - name: Build with Maven
        run: ./mvnw clean package

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: fitnesspro-service-jar
          path: fitnesspro-service/target/*-SNAPSHOT.jar

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: fitnesspro-service-jar
          path: docker-build

      - name: Create Docker context directory
        run: mkdir -p docker

      - name: Copy JAR to Docker context
        run: |
          cp docker-build/*-SNAPSHOT.jar docker/app.jar # Copia e renomeia o JAR

      - name: Build Docker image
        run: docker build -t nikolasluiz123/fitnesspro-service:latest docker

      - name: Push Docker image to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push nikolasluiz123/fitnesspro-service

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: SSH and deploy
        run: |
          echo "${{ secrets.SERVER_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} << EOF
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            docker pull nikolasluiz123/fitnesspro-service
            docker stop spring-app
            docker rm spring-app
            docker run -d -p 8080:8080 \
          --env FITNESS_PRO_DB_USER="${{ secrets.FITNESS_PRO_DB_USER }}" \
          --env FITNESS_PRO_DB_PASSWORD="${{ secrets.FITNESS_PRO_DB_PASSWORD }}" \
          --env SPRING_PROFILES_ACTIVE=remote \
          --name spring-app nikolasluiz123/fitnesspro-service
          EOF
          rm private_key.pem